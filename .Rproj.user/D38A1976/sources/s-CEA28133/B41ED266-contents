---
title: "cavega_OriginalHomeworkCode_04"
author: "C. Vega"
date: "10/15/2019"
output: html_document
---
# This is [Homework 04](https://fuzzyatelin.github.io/bioanth-stats/homework-04.html)
## There are two parts to this homework, one is writing your own function and the other is pulling from the [Kamilar and Cooper Dataset]("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN597_Fall19/KamilarAndCooperData.csv")

# Five Challenges
1. I started with question 2 and got stuck at multiple parts. I struggled most with trying to figure out how to add the equation to the plot, how to create the confidence intervals and PI.
2. I need to get better at navigating ggplot2, since I really can't quite get the hang of it. 
3. In writing the function I got stuck many times. I looked through the textbooks, modules, and searched online without really understanding what each piece of code was supposed to do. 
4. Part of my issue with writing the function is not being able to translate the homework expectations to specific code.
5. Are there any resources you suggest for better understanding if/else statements?


# Part 1: Write  A Function
## Use If- else function
```{r}
Practice
  dude <- function(x) {ifelse(x=="dude","dude","*blank stare*")} 
  dude("yo")

```
## Beginning to Write the Function
```{r}
z.prop.test <- function(p1, n1, p2, n2, p0, alternative = "two.sided", conf.level = 0.95)
   z.statistic <- {
     if (pl == 0){
       return(0)}
        else{{if(is.null(p2) & is.null(n2))
                  if((n1 * p1 <5) | (n1 * (1-p1) < 5))
                  return(c("Warning: Not a Normal Distribution", (p1-p0) /sqrt((p0* (1-p0))/ n1)))
                  else(return(p1-p0)/ sqrt((p0 * (1-p0))/n1))}
          
          {if(!!is.null(p2) & !!is.null(n2))
            if ((p1== 0) | (p2== 0)) {
              return(0)}
            else {if((n1 * p1 < 5) | (n1 * (1-p1) < 5) | (n2 * p2 <5) | (n2 * (1-p2) < 5))
            return(c("Warning: Not a Normal Distribution", ((p1 - p2 - p0 / sqrt((p0 *(1-p0))/((1/n1) + (1 /n2)))))))}
          else(return(((p1-p2-p0) / sqrt((p0 * (1- p0))/ ((1/n1) + (1/n2))))))}}
}

convert.z.score <- function(z.statistic, one.sided=NULL) {
  if(is.null(one.sided)){
    pval = pnorm(-abs(z.statistic));
    pval = 2 * pval
  } else if(one.sided=="-") {
    pval = pnorm(z.statistic);
  } else {
    pval = pnorm(-z.statistic);
    return(pval);
  }
return(c(z.statistic, convert.z.score))
}
  
z.prop.test
```

# Part 2: 
## We will start with part 2, per Dr. Schmitt's suggestion in order to get ego boost before writing a function. 
```{r}
# Loading in Data
library(curl)
f <- curl("https://raw.githubusercontent.com/fuzzyatelin/fuzzyatelin.github.io/master/AN597_Fall19/KamilarAndCooperData.csv")
d <- read.csv(f, header = TRUE, sep = ",", stringsAsFactors = FALSE)
head(d)
```
## Creating a linear regression for longevity to brain size
```{r}
library("ggplot2")

plot(data=d, MaxLongevity_m~Brain_Size_Species_Mean) #quick plot to look at relationship

LModel <- lm(MaxLongevity_m~Brain_Size_Species_Mean, data=d )
LModel #model to use with the graph

names(LModel)

#Equation: y=1.218x+248.952

# Finding correlation value for the two
cor(d$MaxLongevity_m, d$Brain_Size_Species_Mean, use= "complete.obs")
  ## Looking for the number of values that do not have both of these 
      incomplete <- which(is.na(d$MaxLongevity_m)|is.na(d$Brain_Size_Species_Mean))

      length(incomplete) # number of NAs removed from the dataset


```
## Creating Linear Regression Plot for Longevity to Brain size
```{r}

g <- ggplot(data = d, aes(x = MaxLongevity_m, y = Brain_Size_Species_Mean)) 
g <- g + geom_point()
g <- g + geom_smooth(method = "lm", formula = y ~ x)
g <- g + geom_text(aes(label = paste(d, sep = "")),
  parse = TRUE)
g <- g + geom_text() + annotate("text", label = "y=1.218x+248.952", x=200, y=200)
g


plot(fitted(LModel), residuals(LModel))
hist(residuals(LModel))
qqnorm(residuals(LModel))

# Confidence interval

confint(LModel, level=0.90)





```

## Creating a linear regression plot for log longevity to log brain size
```{r}
g <- ggplot(data = d, aes(x = MaxLongevity_m, y = Brain_Size_Species_Mean))
g <- g + geom_point()
g <- g + geom_point(aes(x = MaxLongevity_m, y = Brain_Size_Species_Mean), colour = "red")
g <- g + geom_segment(aes(x = MaxLongevity_m, y = Brain_Size_Species_Mean, xend = MaxLongevity_m, yend = Brain_Size_Species_Mean))
g <- g + geom_smooth(method = "lm", formula = y ~ x)
g
```

